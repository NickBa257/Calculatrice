/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.event.KeyEvent;

public class Calculator extends javax.swing.JFrame {

    double number1;
    String number2;
    double resultat;
    char op1;
    int i = 0, j = 0, q = 0, f = 0, m = 0;

    public Calculator() {

        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Neuf = new javax.swing.JButton();
        Sept = new javax.swing.JButton();
        Huit = new javax.swing.JButton();
        Quatre = new javax.swing.JButton();
        Cinq = new javax.swing.JButton();
        Six = new javax.swing.JButton();
        Un = new javax.swing.JButton();
        Deux = new javax.swing.JButton();
        Trois = new javax.swing.JButton();
        Point = new javax.swing.JButton();
        Zero = new javax.swing.JButton();
        DoubleZero = new javax.swing.JButton();
        Fois = new javax.swing.JButton();
        Moins = new javax.swing.JButton();
        Plus = new javax.swing.JButton();
        Egual = new javax.swing.JButton();
        Clear = new javax.swing.JButton();
        Modulo = new javax.swing.JButton();
        Quotien = new javax.swing.JButton();
        Back = new javax.swing.JButton();
        ResField = new javax.swing.JTextField();
        ResLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Neuf.setText("9");
        Neuf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NeufActionPerformed(evt);
            }
        });
        jPanel1.add(Neuf, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 70, 80, 57));

        Sept.setText("7");
        Sept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeptActionPerformed(evt);
            }
        });
        jPanel1.add(Sept, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 80, 57));

        Huit.setText("8");
        Huit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HuitActionPerformed(evt);
            }
        });
        jPanel1.add(Huit, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, 80, 57));

        Quatre.setText("4");
        Quatre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuatreActionPerformed(evt);
            }
        });
        jPanel1.add(Quatre, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, 80, 57));

        Cinq.setText("5");
        Cinq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CinqActionPerformed(evt);
            }
        });
        jPanel1.add(Cinq, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, 80, 57));

        Six.setText("6");
        Six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SixActionPerformed(evt);
            }
        });
        jPanel1.add(Six, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 130, 80, 57));

        Un.setText("1");
        Un.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                UnInputMethodTextChanged(evt);
            }
        });
        Un.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnActionPerformed(evt);
            }
        });
        jPanel1.add(Un, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, 80, 57));

        Deux.setText("2");
        Deux.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeuxActionPerformed(evt);
            }
        });
        jPanel1.add(Deux, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 190, 80, 57));

        Trois.setText("3");
        Trois.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TroisActionPerformed(evt);
            }
        });
        jPanel1.add(Trois, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 190, 80, 57));

        Point.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Point.setText(".");
        jPanel1.add(Point, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 80, 57));

        Zero.setText("0");
        Zero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZeroActionPerformed(evt);
            }
        });
        jPanel1.add(Zero, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 250, 80, 57));

        DoubleZero.setText("00");
        DoubleZero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoubleZeroActionPerformed(evt);
            }
        });
        jPanel1.add(DoubleZero, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 250, 80, 57));

        Fois.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Fois.setText("x");
        Fois.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FoisActionPerformed(evt);
            }
        });
        jPanel1.add(Fois, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 70, 80, 57));

        Moins.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Moins.setText("-");
        Moins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoinsActionPerformed(evt);
            }
        });
        jPanel1.add(Moins, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 130, 80, 57));

        Plus.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Plus.setText("+");
        Plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlusActionPerformed(evt);
            }
        });
        jPanel1.add(Plus, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 190, 80, 57));

        Egual.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Egual.setText("=");
        Egual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EgualActionPerformed(evt);
            }
        });
        jPanel1.add(Egual, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 250, 80, 57));

        Clear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Clear.setText("C");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });
        jPanel1.add(Clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 80, 57));

        Modulo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Modulo.setText("%");
        Modulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModuloActionPerformed(evt);
            }
        });
        jPanel1.add(Modulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 80, 57));

        Quotien.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Quotien.setText("÷");
        Quotien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuotienActionPerformed(evt);
            }
        });
        jPanel1.add(Quotien, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 80, 57));

        Back.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });
        jPanel1.add(Back, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, 80, 57));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 320, 310));

        ResField.setEditable(false);
        ResField.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ResField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ResField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ResFieldKeyPressed(evt);
            }
        });
        getContentPane().add(ResField, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 320, 70));

        ResLabel.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        ResLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        getContentPane().add(ResLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 320, 30));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void CinqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CinqActionPerformed

        ResLabel.setVisible(true);

        ResLabel.setText(ResLabel.getText() + "5");
        if (number2 != null) {
            number2 = number2 + "5";
        } else {
            number2 = "5";
        }

    }//GEN-LAST:event_CinqActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed

        ResLabel.setText("");
        ResField.setText("");
        number1 = 0;
        number2 = "";
        resultat = 0;
        i = 0;
        j = 0;
        f = 0;
        q = 0;
        m = 0;
    }//GEN-LAST:event_ClearActionPerformed

    private void UnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnActionPerformed

        ResLabel.setVisible(true);

        ResLabel.setText(ResLabel.getText() + "1");
        if (number2 != null) {
            number2 = number2 + "1";
        } else {
            number2 = "1";
        }
    }//GEN-LAST:event_UnActionPerformed

    private void DeuxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeuxActionPerformed

        ResLabel.setVisible(true);

        ResLabel.setText(ResLabel.getText() + "2");
        if (number2 != null) {
            number2 = number2 + "2";
        } else {
            number2 = "2";
        }
    }//GEN-LAST:event_DeuxActionPerformed

    private void TroisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TroisActionPerformed

        ResLabel.setVisible(true);

        ResLabel.setText(ResLabel.getText() + "3");
        if (number2 != null) {
            number2 = number2 + "3";
        } else {
            number2 = "3";
        }
    }//GEN-LAST:event_TroisActionPerformed

    private void QuatreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuatreActionPerformed

        ResLabel.setVisible(true);

        ResLabel.setText(ResLabel.getText() + "4");
        if (number2 != null) {
            number2 = number2 + "4";
        } else {
            number2 = "4";
        }
    }//GEN-LAST:event_QuatreActionPerformed

    private void SixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SixActionPerformed

        ResLabel.setVisible(true);

        ResLabel.setText(ResLabel.getText() + "6");
        if (number2 != null) {
            number2 = number2 + "6";
        } else {
            number2 = "6";
        }
    }//GEN-LAST:event_SixActionPerformed

    private void SeptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeptActionPerformed

        ResLabel.setVisible(true);

        ResLabel.setText(ResLabel.getText() + "7");
        if (number2 != null) {
            number2 = number2 + "7";
        } else {
            number2 = "7";
        }
    }//GEN-LAST:event_SeptActionPerformed

    private void HuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HuitActionPerformed

        ResLabel.setVisible(true);

        ResLabel.setText(ResLabel.getText() + "8");
        if (number2 != null) {
            number2 = number2 + "8";
        } else {
            number2 = "8";
        }
    }//GEN-LAST:event_HuitActionPerformed

    private void NeufActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NeufActionPerformed

        ResLabel.setVisible(true);

        ResLabel.setText(ResLabel.getText() + "9");
        if (number2 != null) {
            number2 = number2 + "9";
        } else {
            number2 = "9";
        }
    }//GEN-LAST:event_NeufActionPerformed

    private void ZeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZeroActionPerformed

        ResLabel.setVisible(true);

        ResLabel.setText(ResLabel.getText() + "0");
        if (number2 != null) {
            number2 = number2 + "0";
        } else {
            number2 = "0";
        }
    }//GEN-LAST:event_ZeroActionPerformed

    private void DoubleZeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoubleZeroActionPerformed

        ResLabel.setVisible(true);

        ResLabel.setText(ResLabel.getText() + "00");
        if (number2 != null) {
            number2 = number2 + "00";
        } else {
            number2 = "00";
        }
    }//GEN-LAST:event_DoubleZeroActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed

        try {
            number2 = ResLabel.getText().substring(0, ResLabel.getText().length() - 1);
            ResLabel.setText(number2);
        } catch (Exception e) {
            // JOptionPane.showMessageDialog(this,"Il n'y a plus rien à supprimer");
        }
    }//GEN-LAST:event_BackActionPerformed

    private void PlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlusActionPerformed

        ResLabel.setVisible(true);
        op1 = '+';

        String Field = ResLabel.getText();
        int FieldL = ResLabel.getText().length();

        if (Field.charAt(FieldL - 1) == '-' || Field.charAt(FieldL - 1) == '*' || Field.charAt(FieldL - 1) == '/' || Field.charAt(FieldL - 1) == '%') {
            ResLabel.setText(ResLabel.getText().substring(ResLabel.getText().length() - 1));
            ResLabel.setText(ResLabel.getText() + "+");

            try {

                number1 = Double.parseDouble(number2);

                number2 = "";

                resultat = resultat + number1;

            } catch (NumberFormatException e) {
                System.out.println("" + e);
            }
            ResField.setText(String.valueOf(resultat));

        } else {
            try {

                number1 = Double.parseDouble(number2);

                number2 = "";

                resultat = resultat + number1;

            } catch (NumberFormatException e) {
                System.out.println("" + e);
            }
            ResLabel.setText(ResLabel.getText() + "+");
            ResField.setText(String.valueOf(resultat));

        }

    }//GEN-LAST:event_PlusActionPerformed

    private void MoinsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoinsActionPerformed

        ResLabel.setVisible(true);

        op1 = '-';

        String Field = ResLabel.getText();
        int FieldL = ResLabel.getText().length();

        if (Field.charAt(FieldL - 1) == '+' || Field.charAt(FieldL - 1) == '*' || Field.charAt(FieldL - 1) == '/' || Field.charAt(FieldL - 1) == '%') {

            ResLabel.setText(Field.substring(0, FieldL - 1));
            ResLabel.setText(ResLabel.getText() + "-");

            try {

                number1 = Double.parseDouble(number2);

                number2 = "";

                switch (i) {
                    case 0:
                        number1 = Double.parseDouble(number2);
                        number2 = "";
                        resultat = number1;
                        i++;
                        break;

                    case 1:
                        number1 = Double.parseDouble(number2);
                        number2 = "";
                        resultat = resultat - number1;
                        break;
                }

            } catch (NumberFormatException e) {
                System.out.println("" + e);
            }
            ResField.setText(String.valueOf(resultat));

        } else {

            try {

                switch (j) {
                    case 0:
                        number1 = Double.parseDouble(number2);
                        number2 = "";
                        resultat = number1;
                        j++;
                        break;

                    case 1:
                        number1 = Double.parseDouble(number2);
                        number2 = "";
                        resultat = resultat - number1;
                        break;
                }

            } catch (NumberFormatException e) {
                System.out.println("" + e);
            }
            ResLabel.setText(ResLabel.getText() + "-");
            ResField.setText(String.valueOf(resultat));

        }

    }//GEN-LAST:event_MoinsActionPerformed

    private void FoisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FoisActionPerformed

        ResLabel.setVisible(true);
        op1 = '*';

        String Field = ResLabel.getText();
        int FieldL = ResLabel.getText().length();

        if (Field.charAt(FieldL - 1) == '+' || Field.charAt(FieldL - 1) == '-' || Field.charAt(FieldL - 1) == '/' || Field.charAt(FieldL - 1) == '%') {

            ResLabel.setText(ResLabel.getText().substring(ResLabel.getText().length() - 1));
            ResLabel.setText(ResLabel.getText() + "*");

            try {
                switch (f) {
                    case 0:
                        number1 = Double.parseDouble(number2);
                        number2 = "";
                        resultat = number1;
                        ResField.setText(String.valueOf(resultat));
                        f++;
                        break;

                    case 1:
                        number1 = Double.parseDouble(number2);
                        number2 = "";
                        resultat = resultat * number1;
                        ResField.setText(String.valueOf(resultat));
                        break;
                }
            } catch (NumberFormatException n) {
                System.out.println("" + n);
            }

        } else {

            try {

                switch (f) {
                    case 0:
                        number1 = Double.parseDouble(number2);
                        number2 = "";
                        resultat = number1;
                        ResLabel.setText(ResLabel.getText() + "*");
                        ResField.setText(String.valueOf(resultat));
                        f++;
                        break;

                    case 1:
                        number1 = Double.parseDouble(number2);
                        number2 = "";
                        resultat = resultat * number1;
                        ResLabel.setText(ResLabel.getText() + "*");
                        ResField.setText(String.valueOf(resultat));
                        break;
                }

            } catch (NumberFormatException n) {
                System.out.println("" + n);
            }
        }

    }//GEN-LAST:event_FoisActionPerformed

    private void ModuloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModuloActionPerformed

        ResLabel.setVisible(true);
        op1 = '%';

        String Field = ResLabel.getText();
        int FieldL = ResLabel.getText().length();

        if (Field.charAt(FieldL - 1) == '+' || Field.charAt(FieldL - 1) == '-' || Field.charAt(FieldL - 1) == '/' || Field.charAt(FieldL - 1) == '*') {

            ResLabel.setText(ResLabel.getText().substring(ResLabel.getText().length() - 1));
            ResLabel.setText(ResLabel.getText() + "%");

            try {
                switch (m) {
                    case 0:
                        number1 = Double.parseDouble(number2);
                        number2 = "";
                        resultat = number1;
                        ResField.setText(String.valueOf(resultat));
                        m++;
                        break;

                    case 1:
                        number1 = Double.parseDouble(number2);
                        number2 = "";
                        resultat = resultat % number1;
                        ResField.setText(String.valueOf(resultat));
                        break;
                }
            } catch (NumberFormatException n) {
                System.out.println("" + n);
            }

        } else {

            try {

                switch (m) {
                    case 0:
                        number1 = Double.parseDouble(number2);
                        number2 = "";
                        resultat = number1;
                        ResLabel.setText(ResLabel.getText() + "%");
                        ResField.setText(String.valueOf(resultat));
                        m++;
                        break;

                    case 1:
                        number1 = Double.parseDouble(number2);
                        number2 = "";
                        resultat = resultat % number1;
                        ResLabel.setText(ResLabel.getText() + "%");
                        ResField.setText(String.valueOf(resultat));
                        break;
                }

            } catch (NumberFormatException n) {
                System.out.println("" + n);
            }
        }

    }//GEN-LAST:event_ModuloActionPerformed

    private void QuotienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuotienActionPerformed

        ResLabel.setVisible(true);
        op1 = '/';

        String Field = ResLabel.getText();
        int FieldL = ResLabel.getText().length();

        if (Field.charAt(FieldL - 1) == '+' || Field.charAt(FieldL - 1) == '-' || Field.charAt(FieldL - 1) == '*' || Field.charAt(FieldL - 1) == '%') {

            ResLabel.setText(ResLabel.getText().substring(ResLabel.getText().length() - 1));
            ResLabel.setText(ResLabel.getText() + "/");

            try {
                switch (q) {
                    case 0:
                        number1 = Double.parseDouble(number2);
                        number2 = "";
                        resultat = number1;
                        ResField.setText(String.valueOf(resultat));
                        q++;
                        break;

                    case 1:
                        number1 = Double.parseDouble(number2);
                        number2 = "";
                        resultat = resultat / number1;
                        ResField.setText(String.valueOf(resultat));
                        break;
                }
            } catch (NumberFormatException n) {
                System.out.println("" + n);
            }

        } else {

            try {

                switch (q) {
                    case 0:
                        number1 = Double.parseDouble(number2);
                        number2 = "";
                        resultat = number1;
                        ResLabel.setText(ResLabel.getText() + "/");
                        ResField.setText(String.valueOf(resultat));
                        q++;
                        break;

                    case 1:
                        number1 = Double.parseDouble(number2);
                        number2 = "";
                        resultat = resultat / number1;
                        ResLabel.setText(ResLabel.getText() + "/");
                        ResField.setText(String.valueOf(resultat));
                        break;
                }

            } catch (NumberFormatException n) {
                System.out.println("" + n);
            }
        }

    }//GEN-LAST:event_QuotienActionPerformed

    private void EgualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EgualActionPerformed

        switch (op1) {
            case '+':

                resultat = resultat + Double.parseDouble(number2);
                ResField.setText(String.valueOf(resultat));
                number2 = String.valueOf(resultat);
                resultat =0.0;
                ResLabel.setText(number2);
                ResLabel.setVisible(false);
                
                break;
            case '-':

                resultat = resultat - Double.parseDouble(number2);
                ResField.setText(String.valueOf(resultat));
                number2 = String.valueOf(resultat);
                resultat =0.0;
                ResLabel.setText(number2);
                ResLabel.setVisible(false);
                break;
            case '*':

                resultat = resultat * Double.parseDouble(number2);
                ResField.setText(String.valueOf(resultat));
                number2 = String.valueOf(resultat);
                resultat =0.0;
                ResLabel.setText(number2);
                ResLabel.setVisible(false);
                
                break;
            case '/':

                resultat = resultat / Double.parseDouble(number2);
                ResField.setText(String.valueOf(resultat));
                number2 = String.valueOf(resultat);
                resultat =0.0;
                ResLabel.setText(number2);
                ResLabel.setVisible(false);
                break;
            case '%':
                resultat = resultat % Double.parseDouble(number2);
                ResField.setText(String.valueOf(resultat));
                number2 = String.valueOf(resultat);
                resultat =0.0;
                ResLabel.setText(number2);
                ResLabel.setVisible(false);
                break;

            default:
                break;
        }


    }//GEN-LAST:event_EgualActionPerformed

    private void UnInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_UnInputMethodTextChanged

    }//GEN-LAST:event_UnInputMethodTextChanged

    private void ResFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ResFieldKeyPressed

        switch (evt.getKeyCode()) {
            case KeyEvent.VK_NUMPAD0:
                ResLabel.setText(ResLabel.getText() + "0");
                if (number2 != null) {
                    number2 = number2 + "0";
                } else {
                    number2 = "0";
                }
                break;
            case KeyEvent.VK_NUMPAD1:
                ResLabel.setText(ResLabel.getText() + "1");
                if (number2 != null) {
                    number2 = number2 + "1";
                } else {
                    number2 = "1";
                }
                break;
            case KeyEvent.VK_NUMPAD2:
                ResLabel.setText(ResLabel.getText() + "2");
                if (number2 != null) {
                    number2 = number2 + "2";
                } else {
                    number2 = "2";
                }
                break;
            case KeyEvent.VK_NUMPAD3:
                ResLabel.setText(ResLabel.getText() + "3");
                if (number2 != null) {
                    number2 = number2 + "3";
                } else {
                    number2 = "3";
                }
                break;
            case KeyEvent.VK_NUMPAD4:
                ResLabel.setText(ResLabel.getText() + "4");
                if (number2 != null) {
                    number2 = number2 + "4";
                } else {
                    number2 = "4";
                }
                break;
            case KeyEvent.VK_NUMPAD5:
                ResLabel.setText(ResLabel.getText() + "5");
                if (number2 != null) {
                    number2 = number2 + "5";
                } else {
                    number2 = "5";
                }
                break;
            case KeyEvent.VK_NUMPAD6:
                ResLabel.setText(ResLabel.getText() + "6");
                if (number2 != null) {
                    number2 = number2 + "6";
                } else {
                    number2 = "6";
                }
                break;
            case KeyEvent.VK_NUMPAD7:
                ResLabel.setText(ResLabel.getText() + "7");
                if (number2 != null) {
                    number2 = number2 + "7";
                } else {
                    number2 = "7";
                }
                break;
            case KeyEvent.VK_NUMPAD8:
                ResLabel.setText(ResLabel.getText() + "8");
                if (number2 != null) {
                    number2 = number2 + "8";
                } else {
                    number2 = "8";
                }
                break;
            case KeyEvent.VK_NUMPAD9:
                ResLabel.setText(ResLabel.getText() + "9");
                if (number2 != null) {
                    number2 = number2 + "9";
                } else {
                    number2 = "9";
                }
                break;
            case KeyEvent.VK_ENTER:
                switch (op1) {
                    case '+':

                        resultat = resultat + Double.parseDouble(number2);
                        ResField.setText(String.valueOf(resultat));
                        ResLabel.setText(null);

                        break;
                    case '-':

                        resultat = resultat - Double.parseDouble(number2);
                        ResField.setText(String.valueOf(resultat));
                        ResLabel.setText(null);

                        break;
                    case '*':

                        resultat = resultat * Double.parseDouble(number2);
                        ResField.setText(String.valueOf(resultat));
                        ResLabel.setText(null);

                        break;
                    case '/':

                        resultat = resultat / Double.parseDouble(number2);
                        ResField.setText(String.valueOf(resultat));
                        ResLabel.setText(null);

                        break;
                    case '%':
                        resultat = resultat % Double.parseDouble(number2);
                        ResField.setText(String.valueOf(resultat));
                        ResLabel.setText(null);

                        break;

                    default:
                        break;
                }

                break;
            case KeyEvent.VK_BACK_SPACE:
                try {
                    number2 = ResLabel.getText().substring(0, ResLabel.getText().length() - 1);
                    ResLabel.setText(number2);
                } catch (Exception e) {
                    // JOptionPane.showMessageDialog(this,"Il n'y a plus rien à supprimer");
                }
                break;

            case KeyEvent.VK_ADD:
                op1 = '+';

                String Field = ResLabel.getText();
                int FieldL = ResLabel.getText().length();

                if (Field.charAt(FieldL - 1) == '-' || Field.charAt(FieldL - 1) == '*' || Field.charAt(FieldL - 1) == '/' || Field.charAt(FieldL - 1) == '%') {
                    ResLabel.setText(ResLabel.getText().substring(ResLabel.getText().length() - 1));
                    ResLabel.setText(ResLabel.getText() + "+");

                    try {

                        number1 = Double.parseDouble(number2);

                        number2 = "";

                        resultat = resultat + number1;

                    } catch (NumberFormatException e) {
                        System.out.println("" + e);
                    }
                    ResField.setText(String.valueOf(resultat));

                } else {
                    try {

                        number1 = Double.parseDouble(number2);

                        number2 = "";

                        resultat = resultat + number1;

                    } catch (NumberFormatException e) {
                        System.out.println("" + e);
                    }
                    ResLabel.setText(ResLabel.getText() + "+");
                    ResField.setText(String.valueOf(resultat));

                }

                break;

            case KeyEvent.VK_MINUS:

                op1 = '-';

                String Field1 = ResLabel.getText();
                int FieldL1 = ResLabel.getText().length();

                if (Field1.charAt(FieldL1 - 1) == '+' || Field1.charAt(FieldL1 - 1) == '*' || Field1.charAt(FieldL1 - 1) == '/' || Field1.charAt(FieldL1 - 1) == '%') {

                    ResLabel.setText(Field1.substring(0, FieldL1 - 1));
                    ResLabel.setText(ResLabel.getText() + "-");

                    try {

                        number1 = Double.parseDouble(number2);

                        number2 = "";

                        switch (i) {
                            case 0:
                                number1 = Double.parseDouble(number2);
                                number2 = "";
                                resultat = number1;
                                i++;
                                break;

                            case 1:
                                number1 = Double.parseDouble(number2);
                                number2 = "";
                                resultat = resultat - number1;
                                break;
                        }

                    } catch (NumberFormatException e) {
                        System.out.println("" + e);
                    }
                    ResField.setText(String.valueOf(resultat));

                } else {

                    try {

                        switch (j) {
                            case 0:
                                number1 = Double.parseDouble(number2);
                                number2 = "";
                                resultat = number1;
                                j++;
                                break;

                            case 1:
                                number1 = Double.parseDouble(number2);
                                number2 = "";
                                resultat = resultat - number1;
                                break;
                        }

                    } catch (NumberFormatException e) {
                        System.out.println("" + e);
                    }
                    ResLabel.setText(ResLabel.getText() + "-");
                    ResField.setText(String.valueOf(resultat));

                }

                break;

            case KeyEvent.VK_MULTIPLY:
                op1 = '*';

                String Field2 = ResLabel.getText();
                int FieldL2 = ResLabel.getText().length();

                if (Field2.charAt(FieldL2 - 1) == '+' || Field2.charAt(FieldL2 - 1) == '-' || Field2.charAt(FieldL2 - 1) == '/' || Field2.charAt(FieldL2 - 1) == '%') {

                    ResLabel.setText(ResLabel.getText().substring(ResLabel.getText().length() - 1));
                    ResLabel.setText(ResLabel.getText() + "*");

                    try {
                        switch (f) {
                            case 0:
                                number1 = Double.parseDouble(number2);
                                number2 = "";
                                resultat = number1;
                                ResField.setText(String.valueOf(resultat));
                                f++;
                                break;

                            case 1:
                                number1 = Double.parseDouble(number2);
                                number2 = "";
                                resultat = resultat * number1;
                                ResField.setText(String.valueOf(resultat));
                                break;
                        }
                    } catch (NumberFormatException n) {
                        System.out.println("" + n);
                    }

                } else {

                    try {

                        switch (f) {
                            case 0:
                                number1 = Double.parseDouble(number2);
                                number2 = "";
                                resultat = number1;
                                ResLabel.setText(ResLabel.getText() + "*");
                                ResField.setText(String.valueOf(resultat));
                                f++;
                                break;

                            case 1:
                                number1 = Double.parseDouble(number2);
                                number2 = "";
                                resultat = resultat * number1;
                                ResLabel.setText(ResLabel.getText() + "*");
                                ResField.setText(String.valueOf(resultat));
                                break;
                        }

                    } catch (NumberFormatException n) {
                        System.out.println("" + n);
                    }
                }

                break;

            case KeyEvent.VK_DIVIDE:
                op1 = '/';

                String Field3 = ResLabel.getText();
                int FieldL3 = ResLabel.getText().length();

                if (Field3.charAt(FieldL3 - 1) == '+' || Field3.charAt(FieldL3 - 1) == '-' || Field3.charAt(FieldL3 - 1) == '*' || Field3.charAt(FieldL3 - 1) == '%') {

                    ResLabel.setText(ResLabel.getText().substring(ResLabel.getText().length() - 1));
                    ResLabel.setText(ResLabel.getText() + "/");

                    try {
                        switch (q) {
                            case 0:
                                number1 = Double.parseDouble(number2);
                                number2 = "";
                                resultat = number1;
                                ResField.setText(String.valueOf(resultat));
                                q++;
                                break;

                            case 1:
                                number1 = Double.parseDouble(number2);
                                number2 = "";
                                resultat = resultat / number1;
                                ResField.setText(String.valueOf(resultat));
                                break;
                        }
                    } catch (NumberFormatException n) {
                        System.out.println("" + n);
                    }

                } else {

                    try {

                        switch (q) {
                            case 0:
                                number1 = Double.parseDouble(number2);
                                number2 = "";
                                resultat = number1;
                                ResLabel.setText(ResLabel.getText() + "/");
                                ResField.setText(String.valueOf(resultat));
                                q++;
                                break;

                            case 1:
                                number1 = Double.parseDouble(number2);
                                number2 = "";
                                resultat = resultat / number1;
                                ResLabel.setText(ResLabel.getText() + "/");
                                ResField.setText(String.valueOf(resultat));
                                break;
                        }

                    } catch (NumberFormatException n) {
                        System.out.println("" + n);
                    }
                }

                break;

            case KeyEvent.VK_DELETE:

                ResLabel.setText("");
                ResField.setText("");
                number1 = 0;
                number2 = "";
                resultat = 0;
                i = 0;
                j = 0;
                f = 0;
                q = 0;
                m = 0;

            default:
                break;
        }

    }//GEN-LAST:event_ResFieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Calculator c = new Calculator();
                c.setTitle("CalculatriceNickBa");
                c.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JButton Cinq;
    private javax.swing.JButton Clear;
    private javax.swing.JButton Deux;
    private javax.swing.JButton DoubleZero;
    private javax.swing.JButton Egual;
    private javax.swing.JButton Fois;
    private javax.swing.JButton Huit;
    private javax.swing.JButton Modulo;
    private javax.swing.JButton Moins;
    private javax.swing.JButton Neuf;
    private javax.swing.JButton Plus;
    private javax.swing.JButton Point;
    private javax.swing.JButton Quatre;
    private javax.swing.JButton Quotien;
    private javax.swing.JTextField ResField;
    private javax.swing.JLabel ResLabel;
    private javax.swing.JButton Sept;
    private javax.swing.JButton Six;
    private javax.swing.JButton Trois;
    private javax.swing.JButton Un;
    private javax.swing.JButton Zero;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
